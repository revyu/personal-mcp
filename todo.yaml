openapi: 3.0.1
info:
  title: Todo API
  version: 0.0.1
  description: API for to-do list server

servers:
  - url: http://127.0.0.1:8000
    description: Todo api

tags:
  - name: tasks
    description: Операции связанные с задачами
  - name: users
    description: Операции связанные с пользователями
components:
  schemas:
    Task:
      type: object
      description: Обьект задачи
      required:
        - id
        - title
        - completed
        - createdAt
        - updatedAt
        - belongsTo
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор задачи.
        title:
          type: string
          minLength: 1
          description: Краткое название задачи (до 200 символов).
        description:
          type: string
          description: Детальное описание задачи.
        completed:
          type: boolean
          default: false
          description: Статус выполнения. true — выполнена, false — нет.
        createdAt: 
          type: string
          format: date-time
          description: Дата и время создания задачи.
        updatedAt:
          type: string
          format: date-time
          description: Дата и время последнего изменения задачи.
        belongsTo:
          $ref: "#/components/schemas/User"
    TaskForPatch:
      type: object
      description: Обьект задачи без обязательных полей (для редактирования)
      properties:
        title:
          type: string
          minLength: 1
          description: Краткое название задачи (до 200 символов).
        description:
          type: string
          description: Детальное описание задачи.
        completed:
          type: boolean
          default: false
          description: Статус выполнения. true — выполнена, false — нет.
    User:
      type: object
      description: Пользователь сервера
      required:
      - id
      properties:
        id: 
          type: integer
          format: int64
          description: Уникальный id пользователя

paths:
  /tasks:
    get:
      tags: ["tasks"]
      description: Получение списка всех задач.
      operationId: getAllTasks
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X GET "http://127.0.0.1:8000/tasks?limit=10&offset=0&filter=all"
      parameters:
        - name: limit 
          in: query
          required: false
          description: Сколько обьектов надо передать
          schema:
            type: integer
        - name: offset
          in: query 
          required: false
          description: Сколько обьектов в начале пропустить
          schema:
            type: integer
        - name: filter
          in: query
          required: false
          description: Фильтрация по завершенности
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        "500":
          description: "Internal Server Error"
    post:
      tags: ["tasks"]
      operationId: createNewTask
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST "http://127.0.0.1:8000/tasks"   -H "Content-Type: application/json"   -d '{"title":"My task","description":"Details","belongsTo":{"_id":123}}'
      description: Создание новой задачи .
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  minLength: 1
                  description: Краткое название задачи (до 200 символов).
                description:
                  type: string
                  description: Детальное описание задачи.
                belongsTo:
                  description: Пользователь которому принадлежит задача
                  allOf:
                    - $ref: "#/components/schemas/User"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: "Bad Request"
  /tasks/{taskId}:
    get:
      tags: ["tasks"]
      operationId: getTaskById
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X GET "http://127.0.0.1:8000/tasks/123" -H "accept: application/json"
      description: Получение одной задачи по её ID.
      parameters:
        - name: taskId
          description: Уникальный идентификатор задачи.
          required: true
          in: path
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "404":
          description: "Not Found"
    patch:
      tags: ["tasks"]
      operationId: patchTaskById
      description: Частичное обновление задачи по ID.
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X PATCH "http://127.0.0.1:8000/tasks/123" -H "Content-Type: application/json" -d '{"completed":true}'
      parameters:
        - name: taskId
          description: Уникальный идентификатор задачи.
          required: true
          in: path
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskForPatch"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: "Bad Request"
        "404":
          description: "Not Found"
    delete:
      tags: ["tasks"]
      operationId: deleteTaskById
      description: "Удаление задачи по ID"
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X DELETE "http://127.0.0.1:8000/tasks/123"
      parameters:
        - name: taskId
          description: Уникальный идентификатор задачи.
          required: true
          in: path
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: "No Content"
        "404":
          description: "No Found"
  /user:
    post:
      tags: ["users"]
      operationId: createUser
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST "http://127.0.0.1:8000/user" -H "Content-Type: application/json" -d '{"id":123}'
      description: Создать пользователя
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              description: Уникальный идентификатор пользователя.
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad Request"
        "409":
          description: "Conflict"

                